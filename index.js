#!/usr/local/bin/node

var parseArgs = require('minimist');
var SshClient = require('ssh2').Client;

var args = parseArgs(process.argv);
// chop off /usr/local/bin/node', and '/Users/nickc/development/remtail/index.js'
var hostPathPairs = args._.slice(2);
// a map of host names to arrays of file paths
var hosts = buildHostMap(hostPathPairs);
var credentialsFilePath = args._.c || '~/.remtail.json';
var credentialMap = buildCredentialsMap(credentialsFilePath);
addCredentials(hosts);

// open an ssh connection to every host and run the tail commands
for (var hostName in hosts) {
    var password = hosts[hostName].password;
    var tailCommand = buildTailCommand(paths);
    console.log('hostname: ' + hostName);
    console.log('command: ' + tailCommand);
    var conn = new SshClient();

    var host = hosts[hostName];
    // use bind to build a function that takes copies of local vars
    // from this particular iteration of the for loop
    var readyCallback = function(conn, hostName, tailCommand) {
        conn.exec(tailCommand, function (err, stream) {
            if (err) throw err;
            stream.on('close', function (code, signal) {
                console.log('Connected closed to: ' + hostName);
                conn.end();
            }).on('data', function (data) {
                console.log(hostName + ' -- ' + data.toString('utf-8'));
            }).stderr.on('data', function (data) {
                console.log(hostName + ' -- ' + data.toString('utf-8'));
            });
        });
    }.bind(this, conn, hostName, port, user, password, tailCommand);
    conn.on('ready', readyCallback).connect({
        host: hostName,
        port: host.port,
        username: host.user,
        password: host.password
    });
}


/**
 * builds an executable tail command
 * @param {object} paths - an array of file paths to tail out
 */
function buildTailCommand(paths) {
    var command = 'tail';
    paths.forEach(function(path) {
        command += ' -f ' + path
    });
    return command;
}


/**
 *
 * @param {string[]} hostPathPairs - an array of pairs like ['nickc@tst-web1:/var/log/httpd.log']
 * @returns {{object}} a map of host names to host objects like {password: 'blah', paths: []}
 */
function buildHostMap(hostPathPairs) {
    var hosts = {};
    hostPathPairs.forEach(function(pair) {
        var hostAndPair = pair.split(':');
        if (hostAndPair.length != 2) {
            console.log('Failed to parse ' + pair);
            process.exit(1);
        }
        var host = hostAndPair[0];
        var path = hostAndPair[1];
        if (host in hosts) {
            hosts[host].paths.push(path);
        } else {
            hosts[host].paths = [path];
        }
    });

    return hosts;
}


/**
 * add login credentials for each host. This mutates the hosts map param.
 * @param {object} hosts - an object of hosts generated by buildHostMap
 * @param {string} credentialMap - user@host to password
 */
function addCredentials(hosts, credentialMap) {
    if (!credentialMap) {
        return;
    }
    for (var hostName in hosts) {
        var host = hosts[hostName];
        if (hostName in credentialMap) {
            var credentials = credentialMap[hostName];
            host['user'] = credentials['user'];
            if (credentials['password']) {
                host['password'] = credentials['password'];
            } else {
                // prompt for password
                host['password'] = prompt(password)
            }
            if (credentials['port']) {
                host['port'] = credentials['port'];
            } else {
                host['port'] = 22;
            }
        }
    }
}


/**
 * reads in a json array of credentials and turns it into a map
 * @param filePath
 */
function buildCredentialsMap(filePath) {
    var credentials = {};
    try {
        var credentialList = JSON.parse(readFileSync(filePath));
        credentialList.forEach(function (credential) {
            var credentialMap = {
                user: credential['user']
            }
            if (credential['password']) {
                credentialMap['password'] = credential['password']
            }
            if (credential['port']) {
                credentialMap['port'] = credential['port']
            }
            credentials[credential['hostname']] = credentialMap
        });
    } catch(e) {
        console.log('Could not build credentials map from file at ' + filePath);
    }
    return credentials;
}