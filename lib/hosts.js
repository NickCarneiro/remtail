var path = require('path');

function buildDisplayPaths(hosts) {
    for (var hostName in hosts) {
        var host = hosts[hostName];
        host.displayPaths = {};

        if (host.paths.length > 1) {
            var pathname = host.paths[0];
            var ptr = 0,
                startIndex = 0,
                endIndex = 0;

            while (ptr > -1) {
                var matchString = pathname.substr(0, ptr);

                var matched = host.paths.every(function(path) {
                    return path.indexOf(matchString) == 0;
                });

                if (matched) {
                    startIndex = ptr + 1;
                } else {
                    break;
                }
                
                ptr = pathname.indexOf('/', ptr + 1);
            }

            while (ptr > -1) {
                var matchString = pathname.substr(ptr);
                console.log(matchString);
                
                var matched = host.paths.every(function(path) {
                    return path.indexOf(matchString) == path.length - matchString.length;
                });

                if (matched) {
                    endIndex = pathname.length - ptr;
                    break;
                }
                
                ptr = pathname.indexOf('/', ptr + 1);
            }

            host.paths.forEach(function(path) {
                var length = path.length - endIndex;
                var displayPath = path.substr(startIndex, length - startIndex);
                host.displayPaths[path] = displayPath;
            });
        } else {
            var pathname = host.paths[0];
            hosts[hostName].displayPaths[pathname] = path.basename(pathname);
        }
    }
}


/**
 *
 * @param {string[]} hostPathPairs - an array of pairs like ['nickc@tst-web1:/var/log/httpd.log']
 * @returns {{object}} a map of host names to host objects like {password: 'blah', paths: []}
 */
function buildHostMap(hostPathPairs) {
    var hosts = {};
    var colorFunctions = ['red', 'yellow', 'green', 'blue', 'magenta', 'cyan', 'white', 'gray'];
    var colorIndex = 0;
    hostPathPairs.forEach(function(pair) {
        var hostAndPair = pair.split(':');
        if (hostAndPair.length !== 2) {
            console.log('Failed to parse ' + pair);
            process.exit(1);
        }
        var host = hostAndPair[0];
        var path = hostAndPair[1];
        if (host in hosts) {
            hosts[host].paths.push(path);
        } else {
            hosts[host] = {
                paths: [path],
                color: colorFunctions[colorIndex]
            };
            colorIndex++;
            if (colorIndex === colorFunctions.length) {
                colorIndex = 0;
            }
        }
    });

    buildDisplayPaths(hosts);

    return hosts;
}


/**
 * Add login credentials for each host. This mutates the hosts map param.
 * 
 * @param {object} hosts - an object of hosts generated by buildHostMap
 * @param {object} credentialMap - hostname to password, port, privateKey
 */
function addCredentials(hosts, credentialMap) {
    if (!credentialMap) {
        return;
    }
    for (var hostName in hosts) {
        var host = hosts[hostName];
        if (hostName in credentialMap) {
            var credentials = credentialMap[hostName];
            host['user'] = credentials['user'];
            
            if (credentials['password']) {
                host['password'] = credentials['password'];
            } else if (credentials['privateKey']) {
                host['privateKey'] = credentials['privateKey'];
            }
            
            if (credentials['port']) {
                host['port'] = credentials['port'];
            } else {
                host['port'] = 22;
            }
        }
    }
}


module.exports = {
    buildDisplayPaths: buildDisplayPaths,
    buildHostMap: buildHostMap,
    addCredentials: addCredentials
};